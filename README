Peter Dewire
Assignment 5 Writeup

This assignment was certainly the longest in the class (and by far). This
probably took 5 times as long as any of the previous assignments, and although
it was not conceptually too challenging (and Appel does a good job of laying out
the format and process in which to code), it could be frustrating at times,
particularly refamiliarizing myself with ML and its write/test/debug cycle.
However, it was also very interesting and clarified a lot of what we have been
doing in the other assignments (where the required output was less clear), and
it was enjoyable to writing in a real programming language again as opposed to
simply using tools like ML-Lex or ML-Yacc. 

I began the assignment by reading Ch. 5 of Appel, looking through the slides,
and reading over the spec as usual. It took some time to understand the problem
fully and actually begin the process of writing code. I started with env.sml,
which was relatively straightforward. Then I moved onto semant.sml, beginning
with OpExp, and slowly making my way forward. At each stage of implementation, I
used small unit tests to make sure the feature I just implemented was working as
expected and I could count on my program as it grew to enormous size (>600
lines). I found the most challenging parts to be records, arrays, and function
declarations. There were a lot of things to test in each of these cases, and
Tiger's syntax for arrays and records is somewhat complex and unusual. 

------------------------
Implementation Decisions
------------------------

One decision that I faced early on was what to return after hitting errors. In
most cases, I return intRet, which is equivalent to {exp=(), ty=T.INT}. I made
this decision based on comments on Piazza, which suggested that in general it
didn't matter, but that returning T.INT's was fine. This became slightly more
complicated in cases where there where arrays/records of other types, but in
general I chose to return arrays/records of T.INT if there was an error in the
type. If there error was so significant that no type could be determined, I
would usually simply return intRet.

The other major decision I had to make was what output to produce: that is,
whether to follow the output in the testfiles themselves or in the .std files.
In many cases, these were the same, but in others they were not, such as in
test06 and test08. I choose to make my errors conform to that of test06.std,
because those seemed more sensible, whereas in test08 I outputted two errors,
one from .std and one frmo both .std and .tig. Based on my understanding of the
piazza of our error messages, we could choose for ourselves which to follow, and
the exact positions and wording of the errors was up to us.


Overall, as5 was extremely stressful and challenging. It took an incredible
amount of time, as Prof. Zhao warned. Fortunately, I started earlier than I did
for the other assignments, but I would have started earlier had I known how long
it was going to take me. Despite the stress, it was an interesting assignment
and I feel much more comfortable in ML and with the concept of type checking.
